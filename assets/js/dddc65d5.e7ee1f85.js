"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[777],{3905:function(e,t,o){o.d(t,{Zo:function(){return p},kt:function(){return m}});var r=o(7294);function n(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}function c(e,t){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),o.push.apply(o,r)}return o}function a(e){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?c(Object(o),!0).forEach((function(t){n(e,t,o[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):c(Object(o)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(o,t))}))}return e}function i(e,t){if(null==e)return{};var o,r,n=function(e,t){if(null==e)return{};var o,r,n={},c=Object.keys(e);for(r=0;r<c.length;r++)o=c[r],t.indexOf(o)>=0||(n[o]=e[o]);return n}(e,t);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(r=0;r<c.length;r++)o=c[r],t.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(n[o]=e[o])}return n}var s=r.createContext({}),l=function(e){var t=r.useContext(s),o=t;return e&&(o="function"==typeof e?e(t):a(a({},t),e)),o},p=function(e){var t=l(e.components);return r.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var o=e.components,n=e.mdxType,c=e.originalType,s=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),d=l(o),m=n,y=d["".concat(s,".").concat(m)]||d[m]||u[m]||c;return o?r.createElement(y,a(a({ref:t},p),{},{components:o})):r.createElement(y,a({ref:t},p))}));function m(e,t){var o=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var c=o.length,a=new Array(c);a[0]=d;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:n,a[1]=i;for(var l=2;l<c;l++)a[l]=o[l];return r.createElement.apply(null,a)}return r.createElement.apply(null,o)}d.displayName="MDXCreateElement"},1760:function(e,t,o){o.r(t),o.d(t,{frontMatter:function(){return i},contentTitle:function(){return s},metadata:function(){return l},toc:function(){return p},default:function(){return d}});var r=o(7462),n=o(3366),c=(o(7294),o(3905)),a=["components"],i={sidebar_position:3},s="AccessPolicy Decorator",l={unversionedId:"access-control-module/access-policy",id:"access-control-module/access-policy",isDocsHomePage:!1,title:"AccessPolicy Decorator",description:"The AccessPolicy decorator is meant to be used in the routes you wish to protect.",source:"@site/docs/access-control-module/access-policy.md",sourceDirName:"access-control-module",slug:"/access-control-module/access-policy",permalink:"/nestjs-prisma-crud/access-control-module/access-policy",editUrl:"https://github.com/kepelrs/nestjs-prisma-crud/edit/master/website/docs/access-control-module/access-policy.md",version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"AccessControlModule",permalink:"/nestjs-prisma-crud/access-control-module/access-control-module"},next:{title:"Built-in Policies",permalink:"/nestjs-prisma-crud/access-control-module/builtin-policies"}},p=[{value:"Usage",id:"usage",children:[]},{value:"allowedRoles",id:"allowedroles",children:[]},{value:"policyMethods",id:"policymethods",children:[]}],u={toc:p};function d(e){var t=e.components,o=(0,n.Z)(e,a);return(0,c.kt)("wrapper",(0,r.Z)({},u,o,{components:t,mdxType:"MDXLayout"}),(0,c.kt)("h1",{id:"accesspolicy-decorator"},"AccessPolicy Decorator"),(0,c.kt)("p",null,"The ",(0,c.kt)("inlineCode",{parentName:"p"},"AccessPolicy")," decorator is meant to be used in the routes you wish to protect."),(0,c.kt)("h3",{id:"usage"},"Usage"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-ts",metastring:"title=post.controller.ts {2}",title:"post.controller.ts","{2}":!0},"@Get('posts')\n@AccessPolicy(allowedRoles, policyMethod1, policyMethod2, policyMethod3 ...)\nasync getPosts(@Query('crudQuery') crudQuery: string) {\n    const match = await this.postsService.findMany(crudQuery);\n    return match;\n}\n")),(0,c.kt)("h3",{id:"allowedroles"},"allowedRoles"),(0,c.kt)("p",null,"The first parameter passed to ",(0,c.kt)("inlineCode",{parentName:"p"},"@AccessPolicy()")," specifies which roles should be granted access to the decorated route."),(0,c.kt)("p",null,"Acceptable values are:"),(0,c.kt)("ol",null,(0,c.kt)("li",{parentName:"ol"},(0,c.kt)("strong",{parentName:"li"},"'everyone'"),": This option makes the route public, granting access to anyone regardless if they are authenticated or not."),(0,c.kt)("li",{parentName:"ol"},(0,c.kt)("strong",{parentName:"li"},"'anyAuthenticated'"),": This option makes the route accessible to anyone who is authenticated and has at least one role."),(0,c.kt)("li",{parentName:"ol"},(0,c.kt)("strong",{parentName:"li"},"An Array or Set of ids"),": the specific role ids which should be granted access to the decorated route. These will be compared with roles retrieved from ",(0,c.kt)("a",{parentName:"li",href:"#optsauthdatakey"},(0,c.kt)("inlineCode",{parentName:"a"},"authData")),".")),(0,c.kt)("h3",{id:"policymethods"},"policyMethods"),(0,c.kt)("p",null,"All values after ",(0,c.kt)("inlineCode",{parentName:"p"},"allowedRoles")," are ",(0,c.kt)("inlineCode",{parentName:"p"},"policyMethods"),". These are used to apply any access policies that go beyond simple role checks. They can be ",(0,c.kt)("a",{parentName:"p",href:"#built-in-policies"},"built in policies"),", or your own ",(0,c.kt)("a",{parentName:"p",href:"./custom-policy"},"custom policies"),"."),(0,c.kt)("p",null,"You can add multiple policies by simply including more arguments to ",(0,c.kt)("inlineCode",{parentName:"p"},"@AccessPolicy(roles, ...policies)"),". See ",(0,c.kt)("a",{parentName:"p",href:"#usage"},"usage"),"."))}d.isMDXComponent=!0}}]);