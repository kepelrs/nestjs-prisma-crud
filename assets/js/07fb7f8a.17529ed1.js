"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[760],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return u}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),m=p(n),u=a,k=m["".concat(l,".").concat(u)]||m[u]||d[u]||i;return n?r.createElement(k,o(o({ref:t},c),{},{components:n})):r.createElement(k,o({ref:t},c))}));function u(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var p=2;p<i;p++)o[p]=n[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},5910:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return l},metadata:function(){return p},toc:function(){return c},default:function(){return m}});var r=n(7462),a=n(3366),i=(n(7294),n(3905)),o=["components"],s={sidebar_position:4},l="CRUD Endpoints",p={unversionedId:"crud-endpoints",id:"crud-endpoints",isDocsHomePage:!1,title:"CRUD Endpoints",description:"\x3c!--",source:"@site/docs/crud-endpoints.md",sourceDirName:".",slug:"/crud-endpoints",permalink:"/nestjs-prisma-crud/crud-endpoints",editUrl:"https://github.com/kepelrs/nestjs-prisma-crud/edit/master/docs/docs/crud-endpoints.md",version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Getting Started",permalink:"/nestjs-prisma-crud/getting-started"},next:{title:"Quickstart",permalink:"/nestjs-prisma-crud/access-control-module/overview"}},c=[{value:"Schematics",id:"schematics",children:[]},{value:"CRUD Controller",id:"crud-controller",children:[]},{value:"CRUD Service",id:"crud-service",children:[{value:"opts.model",id:"optsmodel",children:[]},{value:"opts.prismaClient",id:"optsprismaclient",children:[]},{value:"opts.allowedJoins",id:"optsallowedjoins",children:[]},{value:"opts.defaultJoins",id:"optsdefaultjoins",children:[]},{value:"opts.forbiddenPaths",id:"optsforbiddenpaths",children:[]},{value:"opts.idPropertyName",id:"optsidpropertyname",children:[]},{value:"opts.paginationConfig",id:"optspaginationconfig",children:[]}]},{value:"Extending Controller Functionality with Transaction Support",id:"extending-controller-functionality-with-transaction-support",children:[{value:"Example",id:"example",children:[]}]}],d={toc:c};function m(e){var t=e.components,n=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"crud-endpoints"},"CRUD Endpoints"),(0,i.kt)("h2",{id:"schematics"},"Schematics"),(0,i.kt)("p",null,"We recommend using the schematics package to quickly scaffold your CRUD modules:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Install ",(0,i.kt)("inlineCode",{parentName:"p"},"nestjs-prisma-crud-schematics")," globally:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"npm i nestjs-prisma-crud-schematics --save-dev\n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Scaffold the CRUD module and endpoints (replace ",(0,i.kt)("strong",{parentName:"p"},"post")," with your model's name):"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"nest g -c nestjs-prisma-crud-schematics crud-resource post\n")))),(0,i.kt)("p",null,"The above will scaffold the entire CRUD module for you, most notably:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"post.controller.ts")," where you can add, remove or extend your controllers' functionality."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"post.service.ts")," where you can configure your crud endpoints.")),(0,i.kt)("h2",{id:"crud-controller"},"CRUD Controller"),(0,i.kt)("p",null,"The CRUD controller is just a regular NestJS controller with a few characteristics:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"All routes use the generated ",(0,i.kt)("inlineCode",{parentName:"li"},"<ModelName>Service")," for performing the CRUD operations."),(0,i.kt)("li",{parentName:"ul"},"All routes retrieve ",(0,i.kt)("inlineCode",{parentName:"li"},"@Query('crudQuery') crudQuery: string")," and pass it along to the service.")),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"The ",(0,i.kt)("a",{parentName:"p",href:"#schematics"},"schematic")," generates this file for you."))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:"title=post.controller.ts",title:"post.controller.ts"},"import { Controller, Get, Post, Body, Patch, Param, Delete, Query } from '@nestjs/common';\nimport { PostService } from './post.service';\nimport { CreatePostDto } from './dto/create-post.dto';\nimport { UpdatePostDto } from './dto/update-post.dto';\n\n@Controller('post')\nexport class PostController {\n    constructor(private readonly postService: PostService) {}\n\n    @Post()\n    async create(@Body() createPostDto: CreatePostDto, @Query('crudQuery') crudQuery: string) {\n        const created = await this.postService.create(createPostDto, { crudQuery });\n        return created;\n    }\n\n    @Get()\n    async findMany(@Query('crudQuery') crudQuery: string) {\n        const matches = await this.postService.findMany({ crudQuery });\n        return matches;\n    }\n\n    @Get(':id')\n    async findOne(@Param('id') id: string, @Query('crudQuery') crudQuery: string) {\n        const match = await this.postService.findOne(id, { crudQuery });\n        return match;\n    }\n\n    @Patch(':id')\n    async update(\n        @Param('id') id: string,\n        @Body() updatePostDto: UpdatePostDto,\n        @Query('crudQuery') crudQuery: string,\n    ) {\n        const updated = await this.postService.update(id, updatePostDto, { crudQuery });\n        return updated;\n    }\n\n    @Delete(':id')\n    async remove(@Param('id') id: string, @Query('crudQuery') crudQuery: string) {\n        return this.postService.remove(id, { crudQuery });\n    }\n}\n")),(0,i.kt)("h2",{id:"crud-service"},"CRUD Service"),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"The ",(0,i.kt)("a",{parentName:"p",href:"#schematics"},"schematic")," generates this file for you."))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:"title=post.service.ts",title:"post.service.ts"},"import { Injectable } from '@nestjs/common';\nimport { PrismaCrudService } from 'nestjs-prisma-crud';\n\n@Injectable()\nexport class PostService extends PrismaCrudService {\n    constructor() {\n        super({\n            model: 'post',\n            allowedJoins: [],\n        });\n    }\n}\n")),(0,i.kt)("p",null,"The configuration of your crud endpoints is defined in the ",(0,i.kt)("inlineCode",{parentName:"p"},"super()")," call:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"export interface CrudServiceOpts {\n    model: string;\n    prismaClient?: PrismaClient;\n    allowedJoins: string[];\n    defaultJoins?: string[];\n    forbiddenPaths?: Array<string | RegExp>;\n    idPropertyName?: string;\n    paginationConfig?: PaginationConfig;\n}\n")),(0,i.kt)("p",null,"Below you can find a description of each option."),(0,i.kt)("h3",{id:"optsmodel"},"opts.model"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Type:")," ",(0,i.kt)("inlineCode",{parentName:"p"},"string")," ",(0,i.kt)("br",null),"\n",(0,i.kt)("strong",{parentName:"p"},"Mandatory:")," Yes",(0,i.kt)("br",null),"\n",(0,i.kt)("strong",{parentName:"p"},"Description:")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"prismaClient.model")," on which you wish to perform the CRUD operations."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example:")," ",(0,i.kt)("inlineCode",{parentName:"p"},"'post'")),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"optsprismaclient"},"opts.prismaClient"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Type:")," ",(0,i.kt)("inlineCode",{parentName:"p"},"PrismaClient | PrismaService")," ",(0,i.kt)("br",null),"\n",(0,i.kt)("strong",{parentName:"p"},"Mandatory:")," No",(0,i.kt)("br",null),"\n",(0,i.kt)("strong",{parentName:"p"},"Description:")),(0,i.kt)("p",null,"Set this value if for some reason want to use a different ",(0,i.kt)("inlineCode",{parentName:"p"},"PrismaService")," from the globally provided one."),(0,i.kt)("p",null,"For most use cases it can be left blank."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example:")," ",(0,i.kt)("inlineCode",{parentName:"p"},"prismaService")),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"optsallowedjoins"},"opts.allowedJoins"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Type:")," ",(0,i.kt)("inlineCode",{parentName:"p"},"Array<string>")," ",(0,i.kt)("br",null),"\n",(0,i.kt)("strong",{parentName:"p"},"Mandatory:")," No",(0,i.kt)("br",null),"\n",(0,i.kt)("strong",{parentName:"p"},"Description:")),(0,i.kt)("p",null,"The relations which clients can ask to include in responses (see ",(0,i.kt)("a",{parentName:"p",href:"./client-side"},"client side usage"),"). ",(0,i.kt)("br",null),"\nSupports dot notation."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example:")," ",(0,i.kt)("inlineCode",{parentName:"p"},"['comments.author.posts']"),(0,i.kt)("br",null),"\n",(0,i.kt)("strong",{parentName:"p"},"Default:")," ",(0,i.kt)("inlineCode",{parentName:"p"},"[]")),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"optsdefaultjoins"},"opts.defaultJoins"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Type:")," ",(0,i.kt)("inlineCode",{parentName:"p"},"Array<string>")," ",(0,i.kt)("br",null),"\n",(0,i.kt)("strong",{parentName:"p"},"Mandatory:")," No",(0,i.kt)("br",null),"\n",(0,i.kt)("strong",{parentName:"p"},"Description:")),(0,i.kt)("p",null,"The default relations to be included in responses. ",(0,i.kt)("br",null),"\n",(0,i.kt)("em",{parentName:"p"},"Note:")," Paths must be shallower or same depth as provided in ",(0,i.kt)("inlineCode",{parentName:"p"},"allowedJoins")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example:")," ",(0,i.kt)("inlineCode",{parentName:"p"},"['comments.author']")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"[]"),";",(0,i.kt)("br",null),"\n",(0,i.kt)("strong",{parentName:"p"},"Default:")," ",(0,i.kt)("inlineCode",{parentName:"p"},"opts.allowedJoins")),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"optsforbiddenpaths"},"opts.forbiddenPaths"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Type:")," ",(0,i.kt)("inlineCode",{parentName:"p"},"Array<string | RegExp>")," ",(0,i.kt)("br",null),"\n",(0,i.kt)("strong",{parentName:"p"},"Mandatory:")," No",(0,i.kt)("br",null),"\n",(0,i.kt)("strong",{parentName:"p"},"Description:")),(0,i.kt)("p",null,"The paths you wish to omit in the returned objects. ",(0,i.kt)("br",null),"\n",(0,i.kt)("strong",{parentName:"p"},"Important:")," These values still get fetched from the database, and are excluded just before the function returns!!"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"[\n    'some.nested.exact.string.path',\n\n    // RegExp: delete anything containing the word password\n    /.*password.*/,\n\n    // RegExp: \\d+ targets all comments in an array, deleting their .somethingSecret\n    /comments\\.\\d+\\.somethingSecret/,\n];\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Default:")," ",(0,i.kt)("inlineCode",{parentName:"p"},"[]")),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"optsidpropertyname"},"opts.idPropertyName"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Type:")," ",(0,i.kt)("inlineCode",{parentName:"p"},"string")," ",(0,i.kt)("br",null),"\n",(0,i.kt)("strong",{parentName:"p"},"Mandatory:")," No",(0,i.kt)("br",null),"\n",(0,i.kt)("strong",{parentName:"p"},"Description:")),(0,i.kt)("p",null,"The name of the model's primary key."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example:")," ",(0,i.kt)("inlineCode",{parentName:"p"},"uuid"),(0,i.kt)("br",null),"\n",(0,i.kt)("strong",{parentName:"p"},"Default:")," ",(0,i.kt)("inlineCode",{parentName:"p"},"id")),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"optspaginationconfig"},"opts.paginationConfig"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Type:")," ",(0,i.kt)("inlineCode",{parentName:"p"},"PaginationConfig")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"export type PaginationConfig = {\n    defaultPageSize?: number;\n    maxPageSize?: number;\n    defaultOrderBy?: { [key: string]: 'asc' | 'desc' }[];\n};\n")),(0,i.kt)("br",null),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Mandatory:")," No",(0,i.kt)("br",null),"\n",(0,i.kt)("strong",{parentName:"p"},"Description:")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("inlineCode",{parentName:"strong"},"defaultPageSize")),": when clients do not specify a ",(0,i.kt)("a",{parentName:"p",href:"./client-side#crudquerypagesize"},"pageSize"),", this option will be used.",(0,i.kt)("br",null),"\n",(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("inlineCode",{parentName:"strong"},"maxPageSize")),": client's ",(0,i.kt)("a",{parentName:"p",href:"./client-side#crudquerypagesize"},"pageSize")," option will be capped at this value.",(0,i.kt)("br",null),"\n",(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("inlineCode",{parentName:"strong"},"defaultOrderBy")),": when clients do not specify a ",(0,i.kt)("a",{parentName:"p",href:"./client-side#crudqueryorderby"},"sorting field"),", this option will be used by default. ",(0,i.kt)("br",null)),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Default:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"const PAGINATION_DEFAULTS: PaginationConfig = {\n    defaultPageSize: 25,\n    maxPageSize: 100,\n    defaultOrderBy: [{ [this.idPropertyName]: 'asc' }],\n};\n")),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"extending-controller-functionality-with-transaction-support"},"Extending Controller Functionality with Transaction Support"),(0,i.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"Transaction support relies on prisma's ",(0,i.kt)("a",{parentName:"p",href:"https://www.prisma.io/docs/concepts/components/prisma-client/transactions#interactive-transactions-in-preview"},(0,i.kt)("strong",{parentName:"a"},"Interactive Transactions")),"\nwhich are currently a preview feature."),(0,i.kt)("p",{parentName:"div"},"In order to use this example, you must add the following to your prisma schema:"),(0,i.kt)("pre",{parentName:"div"},(0,i.kt)("code",{parentName:"pre",className:"language-js",metastring:"title=schema.prisma {3}",title:"schema.prisma","{3}":!0},'generator client {\n  provider        = "prisma-client-js"\n  previewFeatures = ["interactiveTransactions"]\n}\n')))),(0,i.kt)("p",null,"There are times when we want to extend a CRUD controller's functionality and perform additional database operations. In those cases we usually want all database operations to happen ",(0,i.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Atomicity_(database_systems)"},"atomically")," (",(0,i.kt)("em",{parentName:"p"},"ie. if one database operation fails, cancel all other operations and leave the database unchanged"),")."),(0,i.kt)("h3",{id:"example"},"Example"),(0,i.kt)("p",null,"Suppose you have a ",(0,i.kt)("inlineCode",{parentName:"p"},"SalesController")," where, aside from the CRUD ",(0,i.kt)("inlineCode",{parentName:"p"},"sale")," operations, you also wish to increment and decrement the balance of the users involved."),(0,i.kt)("p",null,"The example below achieves atomicity by following the following steps:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Start a ",(0,i.kt)("a",{parentName:"li",href:"https://www.prisma.io/docs/concepts/components/prisma-client/transactions#interactive-transactions-in-preview"},"prisma interactive transaction"),"."),(0,i.kt)("li",{parentName:"ol"},"Pass ",(0,i.kt)("inlineCode",{parentName:"li"},"prismaTransaction")," into the ",(0,i.kt)("inlineCode",{parentName:"li"},"PrismaCrudService")," methods."),(0,i.kt)("li",{parentName:"ol"},"Use the ",(0,i.kt)("inlineCode",{parentName:"li"},"prismaTransaction")," instead of ",(0,i.kt)("inlineCode",{parentName:"li"},"prismaClient")," for performing your database operations.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:"title=sales.controller.ts",title:"sales.controller.ts"},"interface CreateSaleDTO {\n    itemId: string;\n    sellerId: string;\n    buyerId: string;\n    dollarAmt: number;\n}\n\n@Controller('sales')\nexport class SalesController {\n    constructor(\n        private readonly salesService: SalesService,\n        private readonly prismaService: PrismaService,\n    ) {}\n\n    @Post()\n    async createSale(@Body() createSaleDto: CreateSaleDTO, @Query('crudQuery') crudQuery: string) {\n        let createdSale;\n        // 0. Start the interactive transaction\n        await this.prismaService.$transaction(async (prismaTransaction) => {\n            // 1. create the sale record\n            createdSale = await this.salesService.create(createSaleDto, {\n                crudQuery,\n                prismaTransaction, //  pass prisma transaction into PrismaCrudService\n            });\n\n            // 2. increment seller's ballance\n            // NOTE: using `prismaTransaction` instead of `this.prismaService`\n            await prismaTransaction.user.update({\n                data: {\n                    balance: {\n                        increment: createSaleDto.dollarAmt,\n                    },\n                },\n                where: {\n                    id: createSaleDto.sellerId,\n                },\n            });\n\n            // 3. decrement buyer's ballance\n            // NOTE: using `prismaTransaction` instead of `this.prismaService`\n            await prismaTransaction.user.update({\n                data: {\n                    balance: {\n                        decrement: createSaleDto.dollarAmt,\n                    },\n                },\n                where: {\n                    id: createSaleDto.buyerId,\n                },\n            });\n        });\n\n        return createdSale;\n    }\n}\n")))}m.isMDXComponent=!0}}]);